{
  "topic_id": 26,
  "topic_name": "CoroutineScope function",
  "points": [
    {
      "id": 1,
      "point": "The CoroutineScope function (with a uppercase C) is a regular function (not a suspending function) that creates an instance of CoroutineScope with a specified CoroutineContext. This scope is used to launch coroutines that can run independently of the caller's lifecycle.",
      "sub_points": [
        "The CoroutineScope function (with a uppercase C) is a regular function while the coroutineScope function (with a lowercase c) is a suspend function that must be called in a coroutine or another suspend function.",
        "The function name CoroutineScope starts with an uppercase letter, which is unusual for a function.",
        "By this function we can create an Scope with the specified CoroutineContext, which allows you to launch coroutines that live within this scope."
      ],
      "snippet_codes": [
        " val scope = CoroutineScope(\n     Dispatchers.IO +\n             Job() +\n             CoroutineName(\"name\"))\n scope.launch(Job()) { ... }\n scope.launch(Job()) { ... }\n scope.launch(Job()) { ... }"
      ]
    },
    {
      "id": 2,
      "point": "There is also a CoroutineScope interface.",
      "sub_points": null,
      "snippet_codes": [
        " interface CoroutineScope {\n    val coroutineContext: CoroutineContext\n }"
      ]
    },
    {
      "id": 3,
      "point": "The coroutineScope function (with a lowercase c) creates a scope and calls the specified suspend block with this. The provided scope inherits its coroutineContext from the outer scope.",
      "sub_points": null,
      "snippet_codes": [
        " suspend fun <R> coroutineScope(\n     block: suspend CoroutineScope.() -> R\n ): R {\n     contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n     \n     return suspendCoroutineUninterceptedOrReturn { uCont ->\n         val coroutine = ScopeCoroutine(uCont.context, uCont)\n         coroutine.startUndispatchedOrReturn(coroutine, block)\n     }\n }"
      ]
    },
    {
      "id": 4,
      "point": "The CoroutineScope function (with a uppercase C) creates an instance of CoroutineScope that wraps the given coroutine context.",
      "sub_points": null,
      "snippet_codes": [
        " @Suppress(\"FunctionName\")\n public fun CoroutineScope(\n     context: CoroutineContext\n ): CoroutineScope =\n     ContextScope(\n         if (context[Job] != null)\n             context\n         else\n             context + Job()\n     )"
      ]
    }
  ]
}