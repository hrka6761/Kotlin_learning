{
  "topic_id": 29,
  "topic_name": "launch",
  "points": [
    {
      "id": 1,
      "point": "launch is a coroutine builder and launches a new coroutine without blocking the current thread and returns a reference to the coroutine as a Job.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 2,
      "point": "The coroutine context is inherited from a CoroutineScope, but you can also specify additional context elements using the context argument.",
      "sub_points": [
        "Each coroutine can have its own context."
      ],
      "snippet_codes": null
    },
    {
      "id": 3,
      "point": "By default, the coroutine is immediately scheduled for execution. Other start options can be specified via start parameter.",
      "sub_points": [
        "CoroutineStart.Default: immediately schedules the coroutine for execution according to its context.",
        "CoroutineStart.Lazy: Starts the coroutine lazily, only when it is needed.(The coroutine is explicitly started using start() or join().",
        "CoroutineStart.ATOMIC: Atomically schedules the coroutine for execution according to its context. This is similar to DEFAULT, but the coroutine cannot be cancelled before it starts executing.",
        "CoroutineStart.UNDISPATCHED: Immediately executes the coroutine until its first suspension point in the current thread similarly to the coroutine being started using Dispatchers. Unconfined. However, when the coroutine is resumed from suspension it is dispatched according to the CoroutineDispatcher in its context."
      ],
      "snippet_codes": null
    }
  ]
}