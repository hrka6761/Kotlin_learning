{
  "topic_id": 26,
  "topic_name": "coroutineScope function",
  "points": [
    {
      "id": 1,
      "point": "The coroutineScope function is a suspending function that creates a new coroutine scope.",
      "sub_points": [
        "It ensures that all of them complete before the coroutineScope itself completes.",
        "It can only be called from within another coroutine or suspending function.",
        "If any coroutine within the scope fails, the scope itself fails, and all coroutines within it are cancelled."
      ],
      "snippet_codes": null
    },
    {
      "id": 2,
      "point": "Coroutines follow a principle of structured concurrency which means that new coroutines can only be launched in a specific coroutine Scope which delimits the lifetime of the coroutine.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 3,
      "point": "runBlocking and coroutineScope functions may look similar because they both wait for their body and all its children to complete.",
      "sub_points": [
        "runBlocking is a regular function and coroutineScope is a suspending function.",
        "the runBlocking method blocks the current thread for waiting, while coroutineScope just suspends, releasing the underlying thread for other usages (suspend coroutine)."
      ],
      "snippet_codes": null
    },
    {
      "id": 4,
      "point": "In the following codes, i run some task by coroutineScope function in the main thread.",
      "sub_points": null,
      "snippet_codes": [
        "     fun main() {\n         task1()\n\n         CoroutineScope(Dispatchers.Main).launch {\n             task2()\n\n             coroutineScope {\n                 launch {\n                     task3()\n                 }\n                 launch {\n                     task4()\n                 }\n             }\n\n             task5()\n         }\n\n         task6()\n     }\n\n\n     private fun task1() { ... }\n     private suspend fun task2() { ... }\n     private suspend fun task3() { ... }\n     private suspend fun task4() { ... }\n     private suspend fun task5() { ... }"
      ]
    }
  ]
}