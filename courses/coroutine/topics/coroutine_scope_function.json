{
  "topic_id": 26,
  "topic_name": "coroutineScope function",
  "points": [
    {
      "id": 1,
      "point": "The coroutineScope function is a suspending function that creates a new scope in the current scope context and dose not create a new coroutine.",
      "sub_points": [
        "It inherits the coroutine context from its caller.",
        "The purpose of coroutineScope is to manage the lifecycle of child coroutines and ensure that all coroutines launched within that scope complete before the scope itself finishes.",
        "It ensures that all of them complete before the coroutineScope itself completes.",
        "It can only be called from within another coroutine or suspending function.",
        "If any coroutine within the scope fails, the scope itself fails, and all coroutines within it are cancelled."
      ],
      "snippet_codes": null
    },
    {
      "id": 2,
      "point": "Coroutines follow a principle of structured concurrency which means that new coroutines can only be launched in a specific coroutine Scope which delimits the lifetime of the coroutine.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 3,
      "point": "runBlocking and coroutineScope functions may look similar because they both wait for their body and all its children to complete.",
      "sub_points": [
        "runBlocking is a regular function and coroutineScope is a suspending function.",
        "the runBlocking method blocks the current thread for waiting, while coroutineScope just suspends, releasing the underlying thread for other usages (suspend coroutine)."
      ],
      "snippet_codes": null
    }
  ]
}