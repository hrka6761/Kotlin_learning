{
  "topic_id": 1,
  "topic_name": "Basic",
  "points": [
    {
      "id": 1,
      "point": "In kotlin, you can group related classes, functions, and other code elements by `package` keyword.",
      "sub_points": [
        "Use all lowercase letters.",
        "Use reverse domain name notation to ensure uniqueness.",
        "Avoid using reserved words or special characters."
      ],
      "snippet_codes": [
        "package ir.hrka.kotlin.core"
      ]
    },
    {
      "id": 2,
      "point": "When you want to use an element of a package, you can Import it into your file to use it without specifying its full name every time.",
      "sub_points": [
        "To use an element in the same package, you don't need to use the full name or import it."
      ],
      "snippet_codes": [
        " Log.i(ir.hrka.kotlin.core.Constants.TAG, \"Test\")",
        " import ir.hrka.kotlin.core.Constants.TAG\n\n Log.i(TAG, \"Test\")"
      ]
    },
    {
      "id": 3,
      "point": "We can declare value by `val` that is immutable.",
      "sub_points": [
        "It equals final variable in java.",
        "It only contains getter accessor.",
        "It is thread safety.",
        "It is more memory-efficient."
      ],
      "snippet_codes": [
        " val a = 1\n     get() {\n         return field + 1\n     }",
        " val b: Long = 1L"
      ]
    },
    {
      "id": 4,
      "point": "We can declare variable by `var` that is mutable.",
      "sub_points": [
        "It equals regular variable in java.",
        "It contains getter and setter accessors."
      ],
      "snippet_codes": [
        " var a: Float = 2.0f\n a = 3.2f",
        " var b = \"Test\"\n     get() {\n         return \"Text is $field\"\n     }\n     set(value) {\n         field = \"New value is $value\"\n     }"
      ]
    },
    {
      "id": 5,
      "point": "A backing field will be generated for a property if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the field identifier.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 6,
      "point": "A `field` is only used as a part of a property to hold its value in memory.",
      "sub_points": [
        "`field` cannot be declared directly and Kotlin provides it in the accessors."
      ],
      "snippet_codes": null
    },
    {
      "id": 7,
      "point": "The field identifier can only be used in the accessors of the property.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 8,
      "point": "You can define custom accessors for a property.",
      "sub_points": [
        "If you define a custom getter, it will be called every time you access the property.",
        "If you define a custom setter, it will be called every time you assign a value to the property, except its initialization."
      ],
      "snippet_codes": null
    },
    {
      "id": 9,
      "point": "Use `val` wherever possible.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 10,
      "point": "Use `var` when necessary.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 11,
      "point": "Late-initialized properties and variables `lateinit var`.",
      "sub_points": [
        "This modifier can be used on var properties declared inside the body of a class.",
        "You can not declare primitive types by late init.\n(only reference types such String or etc.)",
        "It is not allowed on properties with a custom getter or setter.",
        "It is not allowed on properties of nullable types."
      ],
      "snippet_codes": [
        " lateinit var person: Person\n\n if (this::person.isInitialized) {\n    // Do something\n }"
      ]
    },
    {
      "id": 12,
      "point": "Compile-time constants `const val`.",
      "sub_points": [
        "It must be a top-level property, or a member of an object declaration or a companion object.",
        "It must be initialized with a value of type String or a primitive type.",
        "It cannot be a custom getter."
      ],
      "snippet_codes": [
        " const val TAG = \"KotlinLearningProject\""
      ]
    },
    {
      "id": 13,
      "point": "The compiler will inline usages of the constant, replacing the reference to the constant with its actual value. however, the field will not be removed and therefore can be interacted with using reflection.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 14,
      "point": "By default, Kotlin does not allow variables to hold null unless explicitly declared. If you try to assign null to a non-nullable variable, youâ€™ll get a compilation error.",
      "sub_points": [
        "If you want a variable to be able to hold null, you need to declare it as nullable by adding a '?' to the type."
      ],
      "snippet_codes": [
        " var name: String = \"John\"\n\n // Error: Null can not be a value of a non-null type String\n name = null",
        " var name: String? = \"John\"\n\n // This is allowed\n name = null"
      ]
    },
    {
      "id": 15,
      "point": "The safe call operator '?.' allows you to safely access properties or methods of a nullable object. If the object is null, the call is skipped, and the result is null.",
      "sub_points": null,
      "snippet_codes": [
        " // If name is null, length will be null\n val length: Int? = name?.length"
      ]
    },
    {
      "id": 16,
      "point": "If you are sure that a variable is not null, you can use the '!!' operator to forcefully unwrap the nullable type. If the value is null, this will throw a NullPointerException.",
      "sub_points": null,
      "snippet_codes": [
        " // Throws NullPointerException if name is null\n val length: Int = name!!.length"
      ]
    },
    {
      "id": 17,
      "point": "The Elvis operator '?:' allows you to specify a default value if an expression is null.",
      "sub_points": null,
      "snippet_codes": [
        " // If name is null, length will be 0\n val length: Int = name?.length ?: 0"
      ]
    },
    {
      "id": 18,
      "point": "In Kotlin, everything is an object, even primitive types.",
      "sub_points": [
        "The primitive types include the following:"
      ],
      "snippet_codes": [
        " val byte: Byte = 1\n val short: Short = 1\n val int: Int = 1_000_000\n val long: Long = 1L\n\n val float: Float = 1f\n val double: Double = 1.0\n\n val uByte: UByte = 1u\n val uShort: UShort = 1u\n val uInt: UInt = 1u\n val uLong: ULong = 1uL\n\n val boolean: Boolean = true\n val character: Char = 'a'"
      ]
    },
    {
      "id": 19,
      "point": "Numbers, characters, and boolean values are stored as primitive types at compile time except:",
      "sub_points": [
        "When you create a primitive types as nullable reference such as Int?.",
        "When you use generics."
      ],
      "snippet_codes": [
        "val int: Int? = 1 ",
        "val list: List<Int> = listOf(1, 2, 3)"
      ]
    },
    {
      "id": 20,
      "point": "JVM applies the memory optimization to Integers between -128 and 127.",
      "sub_points": null,
      "snippet_codes": [
        " val a: Int = 100\n val boxedA: Int? = a\n val anotherBoxedA: Int? = a\n println(boxedA === anotherBoxedA) // true"
      ]
    },
    {
      "id": 21,
      "point": "Unsigned types (UInt, ULong, UShort, and UByte) are represented as their corresponding signed types (Int, Long, Short, and Byte) at runtime.",
      "sub_points": [
        "Although unsigned types (UInt, ULong, UShort, and UByte) are represented as their corresponding signed types (Int, Long, Short, and Byte) at runtime, their behavior ensures that operations (e.g., addition, subtraction) and properties (e.g., UInt.MAX_VALUE) adhere to unsigned semantics."
      ],
      "snippet_codes": null
    },
    {
      "id": 22,
      "point": "All integer and decimal types are number and extend it and comparable class.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 23,
      "point": "To perform a runtime check use `is` and `!is` operators.",
      "sub_points": null,
      "snippet_codes": [
        " if (number is Byte) {\n     // Do something\n }\n\n if (number !is Number) {\n     // Do something\n }"
      ]
    },
    {
      "id": 24,
      "point": "Smart casts occurred after using `is` and `!is` operators in a control flow like `if` and `when`.",
      "sub_points": null,
      "snippet_codes": [
        " class Dog : Animal {\n\n     fun bark() { ... }\n }",
        " val animal: Animal = Dog()\n if (animal is Dog)\n      animal.bark()"
      ]
    },
    {
      "id": 25,
      "point": "To cast, use `as` keyword.",
      "sub_points": null,
      "snippet_codes": [
        " val casted = fl as Float"
      ]
    },
    {
      "id": 26,
      "point": "To safe casting on nullable use `as?`.",
      "sub_points": null,
      "snippet_codes": [
        " val x: String? = y as String?\n // if y=null x=null , if y is not a string throw ClassCastException.\n val x: String? = y as? String\n // if y=null or is not a string x=null."
      ]
    },
    {
      "id": 27,
      "point": "`return`",
      "sub_points": [
        "By default returns from the nearest enclosing function or anonymous function."
      ],
      "snippet_codes": [
        " fun example() {\n    println(\"Hello\")\n    return // Returns from the example function\n    println(\"This won't be printed\")\n }",
        " fun example() {\n    val lambda = {\n        println(\"In the lambda\")\n        return\n // Returns from the example() function, not the lambda itself\n    }\n    lambda()\n    println(\"This will not be printed\")\n }",
        " fun example() {\n    val lambda = {\n        println(\"In the lambda\")\n        return@lambda // Returns from the lambda itself\n    }\n    lambda()\n    println(\"This will be printed\")\n }"
      ]
    },
    {
      "id": 28,
      "point": "`break",
      "sub_points": [
        "Terminates the nearest enclosing loop."
      ],
      "snippet_codes": [
        " fun main() {\n        for (i in 1..5) {\n            if (i == 3) {\n                println(\"Breaking the loop at i = $i\")\n                break // Exits the loop when i == 3\n            }\n            println(\"i = $i\")\n        }\n        println(\"Loop terminated\")\n }\n\n    i = 1\n    i = 2\n    Breaking the loop at i = 3\n    Loop terminated",
        " fun main() {\n        for (i in 1..3) {\n            for (j in 1..3) {\n                if (j == 2) {\n                    println(\"Breaking inner loop at i = $i, j = $j\")\n                    break // Only exits the inner loop\n                }\n                println(\"i = $i, j = $j\")\n            }\n        }\n }\n\n    i = 1, j = 1\n    Breaking inner loop at i = 1, j = 2\n    i = 2, j = 1\n    Breaking inner loop at i = 2, j = 2\n    i = 3, j = 1\n    Breaking inner loop at i = 3, j = 2",
        "     fun main() {\n        outer@ for (i in 1..3) {\n            for (j in 1..3) {\n                if (j == 2) {\n                    println(\"Breaking outer loop at i = $i, j = $j\")\n                    break@outer // Exits the outer loop\n                }\n                println(\"i = $i, j = $j\")\n            }\n        }\n        println(\"Outer loop terminated\")\n }\n\n    i = 1, j = 1\n    Breaking outer loop at i = 1, j = 2\n    Outer loop terminated"
      ]
    },
    {
      "id": 29,
      "point": "`continue`",
      "sub_points": [
        "Proceeds to the next step of the nearest enclosing loop."
      ],
      "snippet_codes": [
        " fun main() {\n        for (i in 1..5) {\n            if (i == 3) {\n                println(\"Skipping iteration at i = $i\")\n                continue // Skips the rest of the code in this iteration\n            }\n            println(\"i = $i\")\n        }\n }\n\n    i = 1\n    i = 2\n    Skipping iteration at i = 3\n    i = 4\n    i = 5",
        " fun main() {\n        for (i in 1..3) {\n            for (j in 1..3) {\n                if (j == 2) {\n                    println(\"Skipping inner loop iteration at i = $i, j = $j\")\n                    continue // Skips the current iteration of the inner loop\n                }\n                println(\"i = $i, j = $j\")\n            }\n        }\n }\n\n    i = 1, j = 1\n    Skipping inner loop iteration at i = 1, j = 2\n    i = 1, j = 3\n    i = 2, j = 1\n    Skipping inner loop iteration at i = 2, j = 2\n    i = 2, j = 3\n    i = 3, j = 1\n    Skipping inner loop iteration at i = 3, j = 2\n    i = 3, j = 3",
        " fun main() {\n        outer@ for (i in 1..3) {\n            for (j in 1..3) {\n                if (j == 2) {\n                    println(\"Skipping outer loop iteration at i = $i, j = $j\")\n                    continue@outer \n                // Skips the current iteration of the outer loop\n                }\n                println(\"i = $i, j = $j\")\n            }\n        }\n }\n\n    i = 1, j = 1\n    Skipping outer loop iteration at i = 1, j = 2\n    i = 2, j = 1\n    Skipping outer loop iteration at i = 2, j = 2\n    i = 3, j = 1\n    Skipping outer loop iteration at i = 3, j = 2"
      ]
    },
    {
      "id": 30,
      "point": "To handling exceptions, we can use try-catch-finally blocks.",
      "sub_points": null,
      "snippet_codes": [
        " try {\n     // Do something\n } catch (e: Exception) {\n     // Do something\n }",
        " try {\n     // Do something\n } catch (e: NullPointerException) {\n     // Do something\n } catch (e: ArithmeticException) {\n     // Do something\n } catch (e: Exception) {\n     // Do something\n } finally {\n     // Do something\n }",
        " try {\n    // Do something\n } finally {\n    // Do something\n }"
      ]
    },
    {
      "id": 31,
      "point": "There is not any checked exception in kotlin (All exceptions are unchecked).",
      "sub_points": [
        "Checked exception like IoException and unchecked exception like NullPointerException."
      ],
      "snippet_codes": null
    },
    {
      "id": 32,
      "point": "To explicit throw exception by function use `@Throws` annotation.",
      "sub_points": null,
      "snippet_codes": [
        " //In java\n public void riskyMethod() throws IOException {\n        throw new IOException(\"Checked exception in Java\");\n }",
        " //In kotlin\n @Throws(IOException::class)\n fun riskyMethod() {\n        throw java.io.IOException(\"Exception in Kotlin\")\n }"
      ]
    },
    {
      "id": 33,
      "point": "Kotlin has the following collections for grouping items.",
      "sub_points": [
        "Array: Ordered collections of items that immutable and you can only change the value of indices but you can not add new index.",
        "List: Ordered collections of items just like arrays but you can not change the value of indices.",
        "Set: Unique unordered collections of items.",
        "Map: Sets of key-value pairs where keys are unique and map to only one value."
      ],
      "snippet_codes": [
        " val array: Array<Int> = arrayOf(1, 2, 1)\n array[1] = 3",
        " val list: List<Int> = listOf(1, 2, 1)\n val mutableList: MutableList<Int> = mutableListOf(1, 2, 2)\n mutableList.add(5)",
        " val set: Set<Int> = setOf(1, 2, 5)\n val mutableSet: MutableSet<Int> = mutableSetOf(1, 2, 5)\n mutableSet.add(-1)",
        " val map: Map<Int, Boolean> = mapOf(Pair(1, true), Pair(1, false))\n val mutableMap: MutableMap<Int, Int> = mutableMapOf(Pair(1, 1))\n mutableMap[10] = 100L"
      ]
    }
  ]
}