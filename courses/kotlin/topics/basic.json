{
  "topic_id": 1,
  "topic_name": "Basic",
  "points": [
    {
      "id": 1,
      "point": "We declare a `package` at the top of your Kotlin file using the `package` keyword.",
      "sub_points": [
        "Use all lowercase letters.",
        "Use reverse domain name notation to ensure uniqueness.",
        "Avoid using reserved words or special characters."
      ],
      "snippet_codes": [
        "package ir.hrka.kotlin.cheatSheet"
      ]
    },
    {
      "id": 2,
      "point": "When you want to use a class, function, or extension, you can Import it into your file to use the class or function without specifying its full name every time.",
      "sub_points": [
        "To use a function or extension in the same package, you don't need to use the full name or import its package."
      ],
      "snippet_codes": [
        "import ir.hrka.kotlin.cheatSheet.Class"
      ]
    },
    {
      "id": 3,
      "point": "We can declare value by `val` that is immutable.",
      "sub_points": [
        "It equals final variable in java.",
        "It only contains getter.",
        "It is thread safety.",
        "It is more memory-efficient."
      ],
      "snippet_codes": [
        " val a = 1\n     get() {\n         return field + 1\n     }",
        " val b: Long = 1L"
      ]
    },
    {
      "id": 4,
      "point": "We can declare variable by `var` that is mutable.",
      "sub_points": [
        "It equals regular variable in java.",
        "It contains getter and setter."
      ],
      "snippet_codes": [
        " var a: Float = 2.0f\n a = 3.2f",
        " var b = \"text\"\n     get() {\n         return field\n     }\n     set(value) {\n         field = value\n     }"
      ]
    },
    {
      "id": 5,
      "point": "A backing field will be generated for a property if it uses the default implementation of at least one of the accessors, or if a custom accessor references it through the field identifier.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 6,
      "point": "A `field` is only used as a part of a property to hold its value in memory.\n(Fields cannot be declared directly and Kotlin provides it.)",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 7,
      "point": "The field identifier can only be used in the accessors of the property.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 8,
      "point": "You can define custom accessors for a property.",
      "sub_points": [
        "If you define a custom getter, it will be called every time you access the property.",
        "If you define a custom setter, it will be called every time you assign a value to the property, except its initialization."
      ],
      "snippet_codes": null
    },
    {
      "id": 9,
      "point": "Use `val` wherever possible.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 10,
      "point": "Use `var` when necessary.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 11,
      "point": "Late-initialized properties and variables `lateinit var`.",
      "sub_points": [
        "This modifier can be used on var properties declared inside the body of a class.",
        "You can not declare primitive types by late init.\n(only reference types such String or etc.)",
        "It is not allowed on properties with a custom getter or setter.",
        "It is not allowed on properties of nullable types."
      ],
      "snippet_codes": [
        " lateinit var person: Person\n\n if (this::person.isInitialized) {\n    // Do something\n }"
      ]
    },
    {
      "id": 12,
      "point": "Compile-time constants `const val`.",
      "sub_points": [
        "It must be a top-level property, or a member of an object declaration or a companion object.",
        "It must be initialized with a value of type String or a primitive type.",
        "It cannot be a custom getter."
      ],
      "snippet_codes": [
        " const val A = \"constant\""
      ]
    },
    {
      "id": 13,
      "point": "The compiler will inline usages of the constant, replacing the reference to the constant with its actual value. however, the field will not be removed and therefore can be interacted with using reflection.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 14,
      "point": "In Kotlin, everything is an object.",
      "sub_points": null,
      "snippet_codes": [
        " val number: Number = 1\n\n val byte: Byte = 1\n val short: Short = 1\n val int: Int = 1_000_000\n val long: Long = 1L\n\n val float: Float = 1f\n val double: Double = 1.0\n\n val uByte: UByte = 1u\n val uShort: UShort = 1u\n val uInt: UInt = 1u\n val uLong: ULong = 1uL\n\n val boolean: Boolean = true\n val character: Char = 'a'"
      ]
    },
    {
      "id": 15,
      "point": "Numbers are stored as primitive types at compile time except.",
      "sub_points": [
        "When you create a nullable number reference such as Int?.",
        "When you use generics."
      ],
      "snippet_codes": [
        "val int: Int? = 1 ",
        "val list: List<Int> = listOf(1, 2, 3)"
      ]
    },
    {
      "id": 16,
      "point": "JVM applies the memory optimization to Integers between -128 and 127.",
      "sub_points": null,
      "snippet_codes": [
        " val a: Int = 100\n val boxedA: Int? = a\n val anotherBoxedA: Int? = a\n println(boxedA === anotherBoxedA) // true"
      ]
    },
    {
      "id": 17,
      "point": "Unsigned integer is declared to as int in the java.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 18,
      "point": "All integer and decimal types are number and extend it and comparable class.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 19,
      "point": "To perform a runtime check use `is` and `!is` operators.",
      "sub_points": null,
      "snippet_codes": [
        " if (number is Byte) {\n     // Do something\n }\n\n if (number !is Number) {\n     // Do something\n }"
      ]
    },
    {
      "id": 20,
      "point": "Smart casts occurred after using `is` and `!is` operators in a control flow like `if` and `when`.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 21,
      "point": "To cast, you must use `as` operator.",
      "sub_points": null,
      "snippet_codes": [
        " val casted = fl as Float"
      ]
    },
    {
      "id": 22,
      "point": "To safe casting on nullable use `as?`.",
      "sub_points": null,
      "snippet_codes": [
        " val x: String? = y as String?\n // if y=null x=null , if y is not a string throw ClassCastException.\n val x: String? = y as? String\n // if y=null or is not a string x=null."
      ]
    },
    {
      "id": 23,
      "point": "`return`: by default returns from the nearest enclosing function or anonymous function.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 24,
      "point": "`break`: terminates the nearest enclosing loop.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 25,
      "point": "`continue`: proceeds to the next step of the nearest enclosing loop.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 26,
      "point": "There is not any checked exception in kotlin.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 27,
      "point": "To handling exceptions, we can use try-catch-finally blocks.",
      "sub_points": null,
      "snippet_codes": [
        " try {\n     // Do something\n } catch (e: Exception) {\n     // Do something\n }",
        " try {\n     // Do something\n } catch (e: NullPointerException) {\n     // Do something\n } catch (e: ArithmeticException) {\n     // Do something\n } catch (e: Exception) {\n     // Do something\n } finally {\n     // Do something\n }",
        " try {\n    // Do something\n } finally {\n    // Do something\n }"
      ]
    },
    {
      "id": 28,
      "point": "To explicit throw exception by function use `@Throws` annotation.",
      "sub_points": null,
      "snippet_codes": [
        " @Throws(Exception::class)\n fun function() {\n     TODO(\"Not implemented yet\")\n }"
      ]
    },
    {
      "id": 29,
      "point": "Kotlin has the following collections for grouping items.",
      "sub_points": [
        "`Array`: is Ordered collections of items that immutable and you can only change the value of indices but you can not add new index.",
        "`List`: is Ordered collections of items just like arrays but you can not change the value of indices.",
        "`Set`: is Unique unordered collections of items.",
        "`Map`: is Sets of key-value pairs where keys are unique and map to only one value."
      ],
      "snippet_codes": [
        " val array: Array<Int> = arrayOf(1, 2, 1)\n array[1] = 3",
        " val list: List<Int> = listOf(1, 2, 1)\n val mutableList: MutableList<Int> = mutableListOf(1, 2, 2)\n mutableList.add(5)",
        " val set: Set<Int> = setOf(1, 2, 2)\n val mutableSet: MutableSet<Int> = mutableSetOf(1, 2, 2)\n mutableSet.add(-1)",
        " val map: Map<Int, Boolean> = mapOf(Pair(1, true), Pair(1, false))\n val mutableMap: MutableMap<Int, Int> = mutableMapOf(Pair(1, 1))\n mutableMap[10] = 100L"
      ]
    }
  ]
}