{
  "topic_id": 17,
  "topic_name": "Extensions",
  "points": [
    {
      "id": 1,
      "point": "Kotlin provides the ability to extend a class or an interface with new functionality without having to inherit from the class and This is done via special declarations called extensions",
      "sub_points": null,
      "snippet_codes": [
        " fun KotlinClass.extensionFun(val str: String) { ... }",
        " var KotlinClass.extensionProperty: Int\n     get { ... }\n     set(value) { ... }",
        " infix fun Int.plus(int: Int): Int = this + int\n val result = 1 + 1"
      ]
    },
    {
      "id": 2,
      "point": "The this keyword inside an extension function or getter and setter body of extension property corresponds to the receiver object.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 3,
      "point": "If an extension is declared outside its receiver type, it cannot access the receiver's private or protected members.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 4,
      "point": "By defining an extension, you are not inserting new members into a class, only making new functions callable with the dot-notation on variables of this type.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 5,
      "point": "If a class has a member function, and an extension function is defined which has the same receiver type, the same name, and is applicable to given arguments, the member always wins.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 6,
      "point": "It's perfectly OK for extension functions to overload member functions that have the same name but a different signature.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 7,
      "point": "Since extensions do not actually insert members into classes, there's no efficient way for an extension property to have a backing field. This is why initializers are not allowed for extension properties.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 8,
      "point": "Extensions behavior can only be defined by explicitly providing getters/setters.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 9,
      "point": "We can call extensions on the instance of subclasses.",
      "sub_points": null,
      "snippet_codes": [
        " class SuperClass() { ... }\n class SubClass() : SuperClass() { ... }",
        " fun SuperClass.extensionFun(val str: String) { ... }\n val SuperClass.extensionProperty: Int\n     get { ... }\n     set(value) { ... }",
        " val sub: SubClass = SubClass()\n sub.extensionFun(\"str\")\n sub.extensionProperty = 2"
      ]
    },
    {
      "id": 10,
      "point": "If a class has a companion object defined, you can also define extension functions and properties for the companion object.",
      "sub_points": null,
      "snippet_codes": [
        " class KotlinClass {\n    companion object {\n       ...\n    }\n }",
        " fun KotlinClass.Companion.extensionFun() { ... }\n var KotlinClass.Companion.extensionProperty: Int\n     get { ... }\n     set(value) { ... }"
      ]
    },
    {
      "id": 11,
      "point": "To use an extension outside its declaring package, import it at the call site.",
      "sub_points": null,
      "snippet_codes": [
        " import ir.hrka.kotlin.cheatSheet.extensionFun1"
      ]
    },
    {
      "id": 12,
      "point": "We can declare extensions as members of a class, in this way there are two implicit receivers.",
      "sub_points": [
        "Dispatch receiver: Instance of class that in which the extension is declared.",
        "Extension receiver: Instance of class that extension declared on it."
      ],
      "snippet_codes": [
        " open class Parent {\n     open var KotlinClass.extensionProperty: String\n         get() = { ... }\n         set(value) { ... }\n\n     open fun KotlinClass.extensionFunction() { ... }\n }",
        " class Child : Parent() {\n\n     override var KotlinClass.extensionProperty: String\n         get() = { ... }\n         set(value) { ... }\n\n     override fun KotlinClass.extensionFunction() { ... }\n }"
      ]
    },
    {
      "id": 13,
      "point": "In the event of a conflict name between the members of dispatch receiver and extension receiver, the extension receiver takes precedence.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 14,
      "point": "In extension function 'this' refer to the extension receiver and 'this@DispatchReceiver' refer to the dispatch receiver.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 15,
      "point": "when defining an extension with a nullable receiver type, we recommend performing a this == null check inside the function body to avoid compiler errors.",
      "sub_points": null,
      "snippet_codes": null
    }
  ]
}