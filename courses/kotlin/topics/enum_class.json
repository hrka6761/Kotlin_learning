{
  "topic_id": 9,
  "topic_name": "Enum Class",
  "points": [
    {
      "id": 1,
      "point": "The most basic use case for enum classes is the implementation of type-safe enums.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 2,
      "point": "An enum class can implement interfaces.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 3,
      "point": "An enum class can implement interfaces.",
      "sub_points": [
        "An enum class can implement the members of an interface either in every instance individually or in the body of the enum class."
      ],
      "snippet_codes": [
        " interface KotlinInterface {\n\n    fun interfaceFun()\n }",
        " enum class EnumClass : KotlinInterface {\n    A {\n        override fun interfaceFun() {\n            TODO(\"Not yet implemented\")\n        }\n    },\n    B {\n        override fun interfaceFun() {\n            TODO(\"Not yet implemented\")\n        }\n    };\n }",
        " enum class EnumClass : KotlinInterface{\n    A,B;\n\n    override fun interfaceFun() {\n        TODO(\"Not yet implemented\")\n    }\n }"
      ]
    },
    {
      "id": 4,
      "point": "Enum class can contain abstract member that must be implemented by all instances.",
      "sub_points": null,
      "snippet_codes": [
        " enum class EnumClass {\n    A {\n        override val abstractValue: String\n            get() = \"Test\"\n\n        override fun abstractFun() {\n            TODO(\"Not yet implemented\")\n        }\n    },\n    B {\n        override val abstractValue: String = \"Test\"\n\n        override fun abstractFun() {\n            TODO(\"Not yet implemented\")\n        }\n    };\n\n    abstract val abstractValue: String\n\n    abstract fun abstractFun()\n }"
      ]
    },
    {
      "id": 5,
      "point": "Primary constructor of enum class is private.",
      "sub_points": [
        "we cannot instantiate it outside the class body."
      ],
      "snippet_codes": null
    },
    {
      "id": 6,
      "point": "No class can derive from the enum class.",
      "sub_points": [
        "Enum classes cannot be open and always is final."
      ],
      "snippet_codes": null
    },
    {
      "id": 7,
      "point": "All enum classes implemented the Comparable interface by default.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 8,
      "point": "Each enum constant is an object.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 9,
      "point": "Enum classes in Kotlin have synthetic properties and methods for listing the defined enum constants and getting an enum constant by its name.",
      "sub_points": null,
      "snippet_codes": [
        " EnumClass.valueOf(value: String)  // return EnumClass instance\n EnumClass.entries: // return EnumEntries<EnumClass>"
      ]
    },
    {
      "id": 10,
      "point": "Every enum constant also has properties: name and ordinal, for obtaining its name and position (starting from 0) in the enum class declaration.",
      "sub_points": null,
      "snippet_codes": [
        " val name: String = Instance1.name\n val index: Int = Instance1.ordinal"
      ]
    },
    {
      "id": 11,
      "point": "The valueOf() method throws an IllegalArgumentException if the specified name does not match any of the enum constants defined in the class.",
      "sub_points": null,
      "snippet_codes": [
        " val enums: Array<EnumClass> = EnumClass.values()\n val enum: EnumClass =  EnumClass.valueOf(\"Instance1\")"
      ]
    }
  ]
}