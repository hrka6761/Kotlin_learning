{
  "topic_id": 19,
  "topic_name": "Generics",
  "points": [
    {
      "id": 1,
      "point": "Generics in Kotlin allow you to create reusable and type-safe classes, interfaces, and functions that work with different types.",
      "sub_points": null,
      "snippet_codes": [
        " // Generics class\n class GenericClass<T : Serializable, U, V> { ... }\n\n // Generics interface\n interface GenericInterface<T, U> {\n     fun produce(): T\n     fun consume(value: U)\n }",
        " // Generics function\n fun <T, U, V> genericFunction(t: T, u: U, v: V): V { ... }"
      ]
    },
    {
      "id": 2,
      "point": "Generic types are only available at compile time due to a process called type erasure.",
      "sub_points": [
        "Generic type information is removed during compilation, and at runtime, the generic types are replaced with their upper bound.",
        "At runtime, type-specific behavior for generics is not possible."
      ],
      "snippet_codes": null
    },
    {
      "id": 3,
      "point": "Generic types in Java are invariant, meaning List<String> is not a subclass of List<Object> But not so in Kotlin.",
      "sub_points": null,
      "snippet_codes": [
        " // In kotlin\n val strings: List<String> = listOf(\"Kotlin\", \"Java\")\n val anyList: List<Any> = strings"
      ]
    },
    {
      "id": 4,
      "point": "In Kotlin, we can use the `in` and `out` keywords to define the variance of a type parameter.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 5,
      "point": "The type parameter T in a class is covariant, meaning that class can safely use T as an output type but not as an input type.",
      "sub_points": [
        "The `out` modifier is called a variance annotation.",
        "It makes a type parameter covariant, meaning it can only be produced and never consumed.",
        "`out T` (in kotlin) ~ `? extends T` (in java).",
        "In a class, when a type is marked with `out`, that type should only be used as a function output."
      ],
      "snippet_codes": [
        " interface CovariantGenerics<out T> {\n     fun produce(): T\n }",
        " class ProduceNumber() : CovariantGenerics<Number> {\n     override fun produce(): Number {\n         val num: Number = 1\n\n         return num\n     }\n }",
        " class ProduceInt() : CovariantGenerics<Int> {\n     override fun produce(): Int {\n         val num = 1\n         println(\"ProduceInt --> ${num::class.java.name}\")\n\n         return num\n     }\n }",
        " val produceInt: CovariantGenerics<Int> = ProduceInt()\n val produceNumber: CovariantGenerics<Number> = produceInt\n\n produceNumber.produce()::class.java.name // Returned value is Int"
      ]
    },
    {
      "id": 6,
      "point": "The type parameter T in a class is contravariant, meaning that the class can safely use T as an input type but not as an output type.",
      "sub_points": [
        "The `in` modifier is called a variance annotation.",
        "It makes a type parameter contravariant, meaning it can only be consumed and never produced.",
        "`in T` (in kotlin) ~ `? super T` (in java).",
        "In a class, when a type is marked with `in`, that type should only be used as an input parameter to a function."
      ],
      "snippet_codes": [
        " interface ContravariantGenerics<in T> {\n     fun consume(value: T)\n }",
        " class ConsumeNumber : ContravariantGenerics<Number> {\n     override fun consume(value: Number) {\n         println(\"ConsumeNumber --> ${value::class.java.name}\")\n         value.toByte()\n     }\n }",
        " class ConsumeInt : ContravariantGenerics<Int> {\n     override fun consume(value: Int) {\n         println(\"ConsumeInt --> ${value::class.java.name}\")\n         value.toByte()\n     }\n }",
        " val consumeNumber = ConsumeNumber()\n val consumeInt: ContravariantGenerics<Int> = consumeNumber\n consumeInt.consume(1)\n // print \"ConsumeNumber --> java.lang.Integer\""
      ]
    },
    {
      "id": 7,
      "point": "definitely non-nullable",
      "sub_points": [
        "The most common use case for declaring definitely non-nullable types is when you want to override a Java method that contains @NotNull as an argument (`T & Any`).",
        "In the context of the @NotNull annotation in java, it is typically used to indicate that a method or variable should not accept or return null"
      ],
      "snippet_codes": [
        " //In java\n public interface Game<T> {\n    public T save(T x) {}\n    @NotNull\n    public T load(@NotNull T x) {}\n }",
        " //In kotlin\n interface ChessGame<T1> : Game<T1> {\n    override fun save(x: T1): T1\n    // T1 is definitely non-nullable\n    override fun load(x: T1 & Any): T1 & Any\n }"
      ]
    },
    {
      "id": 8,
      "point": "The underscore operator `_` can be used for type arguments. Use it to automatically infer a type of the argument when other types are explicitly specified.",
      "sub_points": null,
      "snippet_codes": [
        " abstract class SomeClass<T> {\n    abstract fun execute() : T\n}\n\nclass SomeImplementation : SomeClass<String>() {\n    override fun execute(): String = \"Test\"\n}\n\nclass OtherImplementation : SomeClass<Int>() {\n    override fun execute(): Int = 42\n }",
        " object Runner {\n    inline fun <reified S: SomeClass<T>, T> run() : T {\n    return S::class.java\n        .getDeclaredConstructor()\n        .newInstance()\n        .execute()\n    }\n }",
        " fun main() {\n    // T is inferred as String because\n    // SomeImplementation derives from SomeClass<String>\n    val s = Runner.run<SomeImplementation, _>()\n    assert(s == \"Test\")\n\n    // T is inferred as Int because\n    // OtherImplementation derives from SomeClass<Int>\n    val n = Runner.run<OtherImplementation, _>()\n    assert(n == 42)\n }"
      ]
    },
    {
      "id": 9,
      "point": "star projection `*` is a way to work with generic types when you don't know or don't need to specify the exact type parameter.",
      "sub_points": [
        "We can consider list<*> as a supertype of list<Any> (But in reality, this is not true.)",
        "We can consider list<Any> as a subtype of list<*> (But in reality, this is not true.)"
      ],
      "snippet_codes": [
        " val list: MutableList<*> = mutableListOf(1, \"\", false, Class())\n list.add(1)",
        " val list1: List<*> = listOf(\"java\", \"kotlin\", 1, false)\n val list2: List<Any> = listOf(\"java\", \"kotlin\", 1, false)\n\n // we can only pass list of Any and subtypes (list2)\n fun processList(list: List<Any>) {}\n\n // We can pass both lists to this function\n fun processList(list: List<*>) {}"
      ]
    },
    {
      "id": 10,
      "point": "When we want to constraint type params in generic function we can use `where` keyword.",
      "sub_points": [
        "When we use `where` for a parameter, that parameter must be of the same type or subclasses."
      ],
      "snippet_codes": [
        " fun <T, U, V> genericFunction(t: T, u: U, v: V): V\n   where T: AnyType, U:AnyType { ... }"
      ]
    }
  ]
}