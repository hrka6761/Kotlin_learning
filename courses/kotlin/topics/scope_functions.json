{
  "topic_id": 16,
  "topic_name": "Scope Functions",
  "points": [
    {
      "id": 1,
      "point": "Scope functions don't introduce any new technical capabilities, but they can make your code more concise and readable.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 2,
      "point": "When you call such a function on an object with a lambda expression provided, it forms a temporary scope and In this scope, you can access the object without its name.",
      "sub_points": null,
      "snippet_codes": null
    },
    {
      "id": 3,
      "point": "There are two main differences between each scope function.",
      "sub_points": [
        "The way they refer to the context object.",
        "Their return value."
      ],
      "snippet_codes": null
    },
    {
      "id": 4,
      "point": "Each scope function uses one of two ways to reference the context object.",
      "sub_points": [
        "As a lambda receiver (this):  run - with - apply",
        "As a lambda argument (it): also - let"
      ],
      "snippet_codes": null
    },
    {
      "id": 5,
      "point": "Each scope function returns one of the following two items.",
      "sub_points": [
        "context object: apply - also",
        "lambda result: let - run - with"
      ],
      "snippet_codes": null
    },
    {
      "id": 6,
      "point": "takeIf",
      "sub_points": [
        "When called on an object along with a predicate, takeIf returns this object if it satisfies the given predicate Otherwise, it returns null So, takeIf is a filtering function for a single object."
      ],
      "snippet_codes": null
    },
    {
      "id": 7,
      "point": "takeUnless",
      "sub_points": [
        "takeUnless has the opposite logic of takeIf.",
        "When called on an object along with a predicate, takeUnless returns null if it satisfies the given predicate Otherwise, it returns the object."
      ],
      "snippet_codes": null
    },
    {
      "id": 8,
      "point": "Here is a short guide for choosing scope functions depending on the intended purpose.",
      "sub_points": [
        "Executing a lambda on non-nullable objects (let)",
        "Introducing an expression as a variable in local scope (`let`)",
        "Object configuration (`apply`)",
        "Object configuration and computing the result (`run`)",
        "Running statements where an expression is required (`non-extension run`)",
        "Additional effects (`also`)",
        "Grouping function calls on an object (`with`)"
      ],
      "snippet_codes": null
    }
  ]
}